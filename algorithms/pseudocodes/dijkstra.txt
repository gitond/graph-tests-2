Dijkstra's algorithm(S,D,G):
/*
	S is source
	D is destination
	G is graph
*/
// variable setups
unvisited: {} ← (∀V∈G : true)							// Create new set called unvisited consisting of all vertices in graph
distances: {}
∀V∈G:										// Distances initial values
	(V = S) → (distances[V.index] ← 0)
	(V ≠ S) → (distances[V.index] ← ∞)
parents: {}
∀V∈G:
	(V = S) → (parents[V.index] ← -1)
	(V ≠ S) → (parents[V.index] ← -2)					// Parent not calculated yet
path: {}
current ← S
i ← 0
// Dijkstra's algorithm
while(i <= G.size): (
	∀ N ∈ current.neighbors:
		(unvisited[N.index] = true) → (
			nWeight ← distances[current.index] + weight(current,N)
			(distances[N.index] > nWeight) → (
				distances[N.index] ← nWeight
				parents[N.index] ← current
			)
		)
	unvisited[current.index] ← false						// marking current as visited
	minDist ← ∞
	minDistInd ← -1
	∀ U ∈ unvisited:
		(unvisited[U.index] = true) → (
			(distances[U.index] < minDist) → (
				minDist ← distances[U.index]
				minDistInd ← U.index
			)
		)
	current ← minDistInd
	(current = D) → (break;)
	i++
)
// Returning path
previous ← parents[current]
while(previous ≠ -1): (
	path.beginning ← current
	current ← previous
	previous ← parents[current]
)
path.beginning ← S
return path
